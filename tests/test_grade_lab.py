import pytest
from fastapi.testclient import TestClient
from main import app
from unittest.mock import patch, MagicMock

client = TestClient(app)

# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ YAML-—Ñ–∞–π–ª–∞
@pytest.fixture
def setup_yaml(tmp_path):
    yaml_content = """
course:
  name: Machine Learning
  alt-names: ["–û–°–ù–û–í–´ –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø"]
  github:
    organization: suai-diplom-2025
  google:
    spreadsheet: dummy-spreadsheet-id
    student-name-column: 2
    lab-column-offset: 1
  labs:
    –õ–†1:
      github-prefix: ml-task1
      short-name: –õ–†1
      alt-lab-names: ["–†–ï–ì–†–ï–°–°–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –í –†–£–¢–ù–ûN"]
      report: ["–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"]
"""
    yaml_file = tmp_path / "course1.yaml"
    yaml_file.write_text(yaml_content, encoding="utf-8")
    return str(tmp_path)

# –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
@patch("main.requests.get")
@patch("main.gspread.authorize")
@patch("main.check_pdf_content")
def test_grade_lab_success(mock_pdf, mock_gspread, mock_requests, setup_yaml):
    # –ú–æ–∫–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    with patch("main.COURSES_DIR", setup_yaml):
        # –ú–æ–∫–∞–µ–º GitHub API
        mock_requests.return_value.status_code = 200
        mock_requests.return_value.json.side_effect = [
            [{"sha": "a1b2c3d4"}],  # commits
            {"files": []},  # commit files
            {"check_runs": [{"name": "CI Check", "conclusion": "success", "html_url": "http://example.com"}]},
            [], [],  # workflows, test_main.py
        ]

        # –ú–æ–∫–∞–µ–º Google Sheets
        mock_sheet = MagicMock()
        mock_sheet.row_values.return_value = ["–§–ò–û", "GitHub", "–õ–†1"]
        mock_sheet.col_values.return_value = ["", "", "istoki0bespokoystva"]
        mock_sheet.cell.return_value.value = "–ê. –í. –ö–æ–Ω–æ–≤–∞–ª–æ–≤–∞"
        mock_gspread.return_value.open_by_key.return_value.worksheet.return_value = mock_sheet

        # –ú–æ–∫–∞–µ–º check_pdf_content
        mock_pdf.return_value = {"first_page": True, "missing_sections": []}

        response = client.post(
            "/courses/1/groups/4232/labs/–õ–†1/grade",
            json={"github": "istoki0bespokoystva"}
        )

    assert response.status_code == 200
    assert response.json()["result"] == "‚úì"
    assert response.json()["status"] == "updated"
    assert "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã" in response.json()["message"]
    assert "PDF —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º" in response.json()["message"]

# –¢–µ—Å—Ç –æ—à–∏–±–∫–∏: –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
@patch("main.requests.get")
@patch("main.gspread.authorize")
def test_grade_lab_course_not_found(mock_gspread, mock_requests, tmp_path):
    with patch("main.COURSES_DIR", str(tmp_path)):  # –ü—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        response = client.post(
            "/courses/1/groups/4232/labs/–õ–†1/grade",
            json={"github": "istoki0bespokoystva"}
        )
    assert response.status_code == 404
    assert response.json()["detail"] == "Course not found"

# –¢–µ—Å—Ç –æ—à–∏–±–∫–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç test_main.py
@patch("main.requests.get")
@patch("main.gspread.authorize")
def test_grade_lab_no_test_main(mock_gspread, mock_requests, setup_yaml):
    with patch("main.COURSES_DIR", setup_yaml):
        mock_requests.side_effect = [
            MagicMock(status_code=404),  # test_main.py –Ω–µ –Ω–∞–π–¥–µ–Ω
            MagicMock(status_code=200),  # workflows
            MagicMock(status_code=200, json=lambda: [{"sha": "a1b2c3d4"}]),  # commits
        ]
        response = client.post(
            "/courses/1/groups/4232/labs/–õ–†1/grade",
            json={"github": "istoki0bespokoystva"}
        )
    assert response.status_code == 400
    assert response.json()["detail"] == "‚ö†Ô∏è test_main.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"

# –¢–µ—Å—Ç –æ—à–∏–±–∫–∏: –∏–∑–º–µ–Ω–µ–Ω–∏–µ test_main.py
@patch("main.requests.get")
@patch("main.gspread.authorize")
def test_grade_lab_test_main_modified(mock_gspread, mock_requests, setup_yaml):
    with patch("main.COURSES_DIR", setup_yaml):
        mock_requests.side_effect = [
            MagicMock(status_code=200),  # test_main.py
            MagicMock(status_code=200),  # workflows
            MagicMock(status_code=200, json=lambda: [{"sha": "a1b2c3d4"}]),  # commits
            MagicMock(status_code=200, json=lambda: {"files": [{"filename": "test_main.py", "status": "modified"}]})  # commit files
        ]
        response = client.post(
            "/courses/1/groups/4232/labs/–õ–†1/grade",
            json={"github": "istoki0bespokoystva"}
        )
    assert response.status_code == 403
    assert response.json()["detail"] == "üö® –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å test_main.py"

# –¢–µ—Å—Ç –æ—à–∏–±–∫–∏: GitHub-–ª–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
@patch("main.requests.get")
@patch("main.gspread.authorize")
def test_grade_lab_github_not_found(mock_gspread, mock_requests, setup_yaml):
    with patch("main.COURSES_DIR", setup_yaml):
        mock_requests.side_effect = [
            MagicMock(status_code=200),  # test_main.py
            MagicMock(status_code=200),  # workflows
            MagicMock(status_code=200, json=lambda: [{"sha": "a1b2c3d4"}]),  # commits
            MagicMock(status_code=200, json=lambda: {"files": []}),  # commit files
            MagicMock(status_code=200, json=lambda: {"check_runs": [{"name": "CI Check", "conclusion": "success", "html_url": "http://example.com"}]})
        ]
        mock_sheet = MagicMock()
        mock_sheet.row_values.return_value = ["–§–ò–û", "GitHub", "–õ–†1"]
        mock_sheet.col_values.return_value = ["", "", "otheruser"]  # –õ–æ–≥–∏–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        mock_sheet.cell.return_value.value = "–ê. –í. –ö–æ–Ω–æ–≤–∞–ª–æ–≤–∞"
        mock_gspread.return_value.open_by_key.return_value.worksheet.return_value = mock_sheet

        response = client.post(
            "/courses/1/groups/4232/labs/–õ–†1/grade",
            json={"github": "istoki0bespokoystva"}
        )
    assert response.status_code == 404
    assert response.json()["detail"] == "GitHub –ª–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

# –¢–µ—Å—Ç –æ—à–∏–±–∫–∏: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PDF
@patch("main.requests.get")
@patch("main.gspread.authorize")
@patch("main.check_pdf_content")
def test_grade_lab_invalid_pdf(mock_pdf, mock_gspread, mock_requests, setup_yaml):
    with patch("main.COURSES_DIR", setup_yaml):
        mock_requests.side_effect = [
            MagicMock(status_code=200),  # test_main.py
            MagicMock(status_code=200),  # workflows
            MagicMock(status_code=200, json=lambda: [{"sha": "a1b2c3d4"}]),  # commits
            MagicMock(status_code=200, json=lambda: {"files": []}),  # commit files
            MagicMock(status_code=200, json=lambda: {"check_runs": [{"name": "CI Check", "conclusion": "success", "html_url": "http://example.com"}]})
        ]
        mock_sheet = MagicMock()
        mock_sheet.row_values.return_value = ["–§–ò–û", "GitHub", "–õ–†1"]
        mock_sheet.col_values.return_value = ["", "", "istoki0bespokoystva"]
        mock_sheet.cell.return_value.value = "–ê. –í. –ö–æ–Ω–æ–≤–∞–ª–æ–≤–∞"
        mock_gspread.return_value.open_by_key.return_value.worksheet.return_value = mock_sheet

        mock_pdf.return_value = {"first_page": False, "missing_sections": ["–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã"]}

        response = client.post(
            "/courses/1/groups/4232/labs/–õ–†1/grade",
            json={"github": "istoki0bespokoystva"}
        )
    assert response.status_code == 200
    assert response.json()["result"] == "‚úó"
    assert "–û—à–∏–±–∫–∏ –≤ PDF" in response.json()["message"]
    assert response.json()["pdf_check"]["pdf_message"] == [
        "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ PDF",
        "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–¥–µ–ª—ã –≤ PDF: –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã"
    ]
